/*
 *  Copyright 2011-12 ARM Limited
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *    * Redistributions of source code must retain the above copyright
 *      notice, this list of conditions and the following disclaimer.
 *    * Redistributions in binary form must reproduce the above copyright
 *      notice, this list of conditions and the following disclaimer in the
 *      documentation and/or other materials provided with the distribution.
 *    * Neither the name of ARM Limited nor the
 *      names of its contributors may be used to endorse or promote products
 *      derived from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY ARM LIMITED AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL ARM LIMITED BE LIABLE FOR ANY
 *  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 *  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * NE10 Library : ReleaseNote.txt
 */
NE10 SIMD LIBRARY - Release Note
LAST UPDATED ON: 10 / APR / 2012

========
Contents
========

   1. Preface
         1-a. License
         1-b. Product status
   2. Release details
         2-a. Product release status
         2-b. Functions included
         2-c. Test cases and results
   3. Installation
         3-a. Requirements
         3-b. Alternative Approach
   4. Changelog
         4-a. r1.0_beta


==========
1. Preface
==========

1-a. License details
--------------------
NE10 is an open source project released under New BSD License.
See the file LICENSE for the full text.


1-b. Product status
-------------------
This is the first publicly available version of NE10. This open source project
is actively under development and more functions as well as improved versions of
the available functions will be contributed to the source code.


==================
2. Release details
==================

2-a. Product release status
---------------------------
Version 1.0 beta

The set of functions planned for this release are in place.  However some issues
remain where their intended behaviour diverges from the planned specification:

In the release version, unless impractical and explicitly stated, all functions
will operate correctly when the output area of the result is the same as one
of the input areas. (ie. where the src1 or src2 parameter == the dst parameter)

In this beta release that behaviour cannot be assumed.

2-b. Functions included
---------------------------
NE10 is a software library that provides Linux and Android support for Single
Instruction Multiple Data (SIMD) functionality. In this release, a number of
mathematical functions (mainly vector and scalar operations) have been
implemented for the ARM v7 instruction set architecture as well as ARM NEON
SIMD architecture extensions.

This library has been developed and tested on the following processors:

  1) ARM Cortex-A9 with NEON extension
  2) ARM Cortex-A8 with NEON extension

The following is a list of currently available functions.

  a) Vector-Constant Arithmetic

   addc_float, addc_vec2f, addc_vec3f, addc_vec4f,
   subc_float, subc_vec2f, subc_vec3f, subc_vec4f,
   rsbc_float, rsbc_vec2f, rsbc_vec3f, rsbc_vec4f,
   mulc_float, mulc_vec2f, mulc_vec3f, mulc_vec4f,
   divc_float, divc_vec2f, divc_vec3f, divc_vec4f,
   setc_float, setc_vec2f, setc_vec3f, setc_vec4f,
   mlac_float, mlac_vec2f, mlac_vec3f, mlac_vec4f

  b) Arithmetic functions over arrays of cst values:

   add_float, sub_float, mul_float, div_float, mla_float, abs_float

  c) Operations on Vectors:

   abs_vec2f, abs_vec3f, abs_vec4f,
   addc_vec2f, addc_vec3f, addc_vec4f,
   add_vec2f, add_vec3f, add_vec4f,
   divc_vec2f, divc_vec3f, divc_vec4f,
   dot_vec2f, dot_vec3f, dot_vec4f
   len_vec2f, len_vec3f, len_vec4f,
   mlac_vec2f, mlac_vec3f, mlac_vec4f,
   mulc_vec2f, mulc_vec3f, mulc_vec4f,
   normalize_vec2f, normalize_vec3f, normalize_vec4f,
   rsbc_vec2f, rsbc_vec3f, rsbc_vec4f,
   setc_vec2f, setc_vec3f, setc_vec4f,
   subc_vec2f, subc_vec3f, subc_vec4f,
   sub_vec2f, sub_vec3f, sub_vec4f,
   vdiv_vec2f, vdiv_vec3f, vdiv_vec4f,
   vmla_vec2f, vmla_vec3f, vmla_vec4f,
   vmul_vec2f, vmul_vec3f, vmul_vec4f,
   cross_vec3f

  d) Matrix operations:

   addmat_2x2f, addmat_3x3f, addmat_4x4f,
   detmat_2x2f, detmat_3x3f, detmat_4x4f,
   divmat_2x2f, divmat_3x3f, divmat_4x4f,
   identitymat_2x2f, identitymat_3x3f, identitymat_4x4f,
   invmat_2x2f, invmat_3x3f, invmat_4x4f,
   mulcmatvec_2x2f, mulcmatvec_3x3f, mulcmatvec_4x4f,
   mulmat_2x2f, mulmat_3x3f, mulmat_4x4f,
   multrans_mat2x2f, multrans_mat3x3f, multrans_mat4x4f,
   setmat_2x2f, setmat_3x3f, setmat_4x4f,
   submat_2x2f, submat_3x3f, submat_4x4f,
   transmat_2x2f, transmat_3x3f, transmat_4x4f,

2-c. Test cases and results
---------------------------
The provided functions are categorized according to the operations that they
perform.  Functions in each of these categories accept different types of input
data. Each set is accompanied with a unit test. These unit tests are provided
as part of this library and can be used to verify and benchmark these functions
on a target platform.

===============
3. Installation
===============

3-a. Requirements
-----------------
This release has been built and tested on the following host environments:

 1) ARM Versatile Express / Linux linaro 2.6.38-1003
 2) BeagleBoard RevC / Linux linaro-developer 3.1.0-4
 3) Android AOSP Emulator / Android Open Source Project Toolchain


The source code has been successfully built with the following toolchains:

 1) Linaro GCC v4.6.1 ( https://launchpad.net/gcc-linaro/4.6 )
 2) Prebuilt GCC toolchain provided with ICS release of ASOP


3-b. Native Building
--------------------

Native building (building directly on an ARM platform) is supported via

    make

This will build a libne10.a and libne10.so in the local directory along with
some test binaries.

    ./nightly.pl

Will build and run a set of tests

3-c. Android Building

To build as part of the Android Open Source Project, copy the release
directory into 'external' within the source directories and build as
normal.  This will install the libne10.so library into system/lib on the
final Android OS image, where other applications will be able to access it in
a similar way to other shared libraries.  You will need to build with
TARGET_ARCH_VARIANT=armv7-a-neon defined to enable NEON support.

3-d. Alternative Approach
-------------------------
While not supported, the functions within this library can be taken and
incorporated (licensing conflicts permitting) within other projects as is.
Details of how to do this are too project specific to detail here.

============
4. Changelog
============

4-a. r1.0_beta

    * Updated AOSP Makefile, cleaned native Makefile
        * Adding new files to the AOSP build
        * Made the default makefile a little more readable
    * New functions: Matrix transpose and identity matrix routines.
    * New functions: Matrix inversion routines.
    * New functions: Matrix determinant routines.
    * New functions: Matrix-vector multiplication routines.
    * New functions: Matrix multiplication routines.
    * New functions: Matrix addition and subtraction.
    * New functions: Cross product routine.
    * New functions: Dot product routines.
    * New functions: Vectorized mla routines.
    * New functions: Vectorized division routines.
    * New functions: Vectorized abs routine.
    * New functions: Vector-sub routines.
    * New functions: Vector-add routines.
    * Added the disclaimer:
        Each function is implemented in C, ARM Assembly and NEON code as a
        basis for comparison. Assembly versions, while efficient, are not
        intended as best-practice examples.
    * Added CMake to implement cross-platform build system
    * Added support for C++
